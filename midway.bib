%% This BibTeX bibliography file was created using BibDesk.
%% http://bibdesk.sourceforge.net/


%% Created for Cyrus Omar at 2012-11-04 23:36:27 -0500 


%% Saved with string encoding Unicode (UTF-8) 



@inproceedings{Gabel:2010:FSE,
	Abstract = {This paper presents the results of the first study of
		 the uniqueness of source code. We define the uniqueness
		 of a unit of source code with respect to the entire
		 body of written software, which we approximate with a
		 corpus of 420 million lines of source code. Our
		 high-level methodology consists of examining a
		 collection of 6,000 software projects and measuring the
		 degree to which each project can be `assembled' solely
		 from portions of this corpus, thus providing a precise
		 measure of `uniqueness' that we call syntactic
		 redundancy. We parametrised our study over a variety of
		 variables, the most important of which being the level
		 of granularity at which we view source code. Our suite
		 of experiments together consumed approximately four
		 months of CPU time, providing quantitative answers to
		 the following questions: at what levels of granularity
		 is software unique, and at a given level of
		 granularity, how unique is software? While we believe
		 these questions to be of intrinsic interest, we discuss
		 possible applications to genetic programming and
		 developer productivity tools.},
	Acmid = {1882315},
	Address = {Santa Fe, New Mexico, USA},
	Author = {Mark Gabel and Zhendong Su},
	Booktitle = {Proceedings of the eighteenth ACM SIGSOFT international symposium on Foundations of software engineering},
	Date-Added = {2012-11-04 23:36:05 -0500},
	Date-Modified = {2012-11-04 23:36:05 -0500},
	Doi = {doi:10.1145/1882291.1882315},
	Doi-Url = {http://dx.doi.org/10.1145/1882291.1882315},
	Isbn13 = {978-1-60558-791-2},
	Keywords = {genetic algorithms, genetic programming, large scale study, software uniqueness, source code},
	Month = {7-11 } # nov,
	Notes = {Brief mention of GP and how their results apply to GP. C,C++,Java. n-grams. p147 'Singularity in software engineering's future'. p149 'syntactically redundant' p152 'striking similarity' between 30 current sourceforge projects. p155 Almost all small code fragments have been written many times (Small means 'approximately one to seven lines of source code'). Cites Jiang and Zu ISSTA 2009, \cite{koza:book} and \cite{Weimer:2009:ICES}. FSE '10, Gabel:2010:SUS:1882291.1882315},
	Pages = {147--156},
	Publisher = {ACM},
	Size = {10 pages},
	Title = {A Study of the Uniqueness of Source Code},
	Url = {http://www.cs.ucdavis.edu/~su/publications/fse10.pdf},
	Year = {2010},
	Bdsk-Url-1 = {http://www.cs.ucdavis.edu/~su/publications/fse10.pdf},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/1882291.1882315}}

@inproceedings{mooty_calcite:_2010,
	Abstract = {Calcite is a new Eclipse plugin that helps address the difficulty of understanding and correctly using an {API.} Calcite finds the most popular ways to instantiate a given class or interface by using code examples. To allow the users to easily add these object instantiations to their code, Calcite adds items to the popup completion menu that will insert the appropriate code into the user's program. Calcite also uses crowd sourcing to add to the menu instructions in the form of comments that help the user perform functions that people have identified as missing from the {API.} In a user study, Calcite improved users' success rate by 40\%.},
	Author = {M. Mooty and A. Faulring and J. Stylos and {B.A.} Myers},
	Booktitle = {Proc. 2010 {IEEE} Symposium on Visual Languages and {Human-Centric} Computing (VL/HCC'10)},
	Date-Added = {2012-11-04 23:33:25 -0500},
	Date-Modified = {2012-11-04 23:33:25 -0500},
	Doi = {10.1109/VLHCC.2010.12},
	Isbn = {1943-6092},
	Keywords = {{API,} application program interfaces, Calcite, code completion, crowd sourcing, Eclipse plugin, popup completion menu, program compilers, user perform functions, user program},
	Pages = {15-22},
	Shorttitle = {Calcite},
	Title = {Calcite: Completing Code Completion for Constructors Using Crowds},
	Year = {2010},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/VLHCC.2010.12}}

@inproceedings{robbes_how_2008,
	Abstract = {Code completion is a widely used productivity tool. It takes away the burden of remembering and typing the exact names of methods or classes: As a developer starts typing a name, it provides a progressively refined list of candidates matching the name. However, the candidate list always comes in alphabetic order, i.e., the environment is only second-guessing the name based on pattern matching. Finding the correct candidate can be cumbersome or slower than typing the full name. We present an approach to improve code completion with program history. We define a benchmark measuring the accuracy and usefulness of a code completion engine. Further, we use the change history data to also improve the results offered by code completion tools. Finally, we propose an alternative interface for completion tools.},
	Author = {R. Robbes and M. Lanza},
	Booktitle = {Proc. 23rd {IEEE/ACM} International Conference on Automated Software Engineering (ASE'08)},
	Date-Added = {2012-11-04 23:30:36 -0500},
	Date-Modified = {2012-11-04 23:30:36 -0500},
	Doi = {10.1109/ASE.2008.42},
	Isbn = {1527-1366},
	Keywords = {code completion, codes, pattern matching, productivity tool},
	Pages = {317--326},
	Title = {How Program History Can Improve Code Completion},
	Year = {2008},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ASE.2008.42}}

@inproceedings{Hindle:2012:NS:2337223.2337322,
	Acmid = {2337322},
	Address = {Piscataway, NJ, USA},
	Author = {Hindle, Abram and Barr, Earl T. and Su, Zhendong and Gabel, Mark and Devanbu, Premkumar},
	Booktitle = {Proceedings of the 2012 International Conference on Software Engineering},
	Isbn = {978-1-4673-1067-3},
	Location = {Zurich, Switzerland},
	Numpages = {11},
	Pages = {837--847},
	Publisher = {IEEE Press},
	Series = {ICSE 2012},
	Title = {On the naturalness of software},
	Url = {http://dl.acm.org/citation.cfm?id=2337223.2337322},
	Year = {2012},
	Bdsk-Url-1 = {http://dl.acm.org/citation.cfm?id=2337223.2337322}}

@inproceedings{Bruch:2009:LEI:1595696.1595728,
	Acmid = {1595728},
	Address = {New York, NY, USA},
	Author = {Bruch, Marcel and Monperrus, Martin and Mezini, Mira},
	Booktitle = {Proceedings of the the 7th joint meeting of the European software engineering conference and the ACM SIGSOFT symposium on The foundations of software engineering},
	Doi = {10.1145/1595696.1595728},
	Isbn = {978-1-60558-001-2},
	Keywords = {code completion, code recommender, content assist, integrated development environment},
	Location = {Amsterdam, The Netherlands},
	Numpages = {10},
	Pages = {213--222},
	Publisher = {ACM},
	Series = {ESEC/FSE '09},
	Title = {Learning from examples to improve code completion systems},
	Url = {http://doi.acm.org/10.1145/1595696.1595728},
	Year = {2009},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/1595696.1595728},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/1595696.1595728}}

@inproceedings{QualitasCorpus:APSEC:2010,
   author = {Tempero, Ewan and Anslow, Craig and Dietrich, Jens and Han, Ted and Li, Jing and Lumpe, Markus and Melton, Hayden and Noble, James},
   title = {Qualitas Corpus: A Curated Collection of Java Code for Empirical Studies},
   booktitle = {2010 Asia Pacific Software Engineering Conference (APSEC2010)},
   pages = {336--345},
   month = dec,
   year = {2010},
}
